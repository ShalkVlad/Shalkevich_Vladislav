import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

import DB
from Creat_Bot import bot, dp
from DB import get_all_profiles, session, User, Profile
from Other import load_language_texts, get_user_language
from User_kb import main, sympathies, create_nextsdelete_keyboard, \
    create_syma_keyboard, ssympathy
from likes import (add_like, get_pending_sympathy,
                   move_pending_to_mutual, get_mutually_liked_users, delete_mutual_sympathy, get_unanswered_sympathy,
                   delete_sympathy_entry, get_users_unanswered_sympathy)
from Profil_vere import get_user_preferences

btn_send_sympathy = types.KeyboardButton("‚ù§Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–º–ø–∞—Ç–∏—é")
btn_skip = types.KeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
btn_back_to_main_menu = types.KeyboardButton("üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

sympathy = types.ReplyKeyboardMarkup(resize_keyboard=True)
sympathy.add(btn_send_sympathy, btn_skip, btn_back_to_main_menu)


class ProfileLookupState(StatesGroup):
    show_next = State()
    respond_to_sympathy = State()


async def get_random_profiles(user_id: int, count: int):
    user_preferences = get_user_preferences(user_id)
    if not user_preferences:
        return []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

    all_profiles = get_all_profiles()
    unanswered_sympathy = get_users_unanswered_sympathy(user_id)
    mutually_liked_users = get_mutually_liked_users(user_id)

    filtered_profiles = [
        profile for profile in all_profiles
        if
        profile.id != user_id and profile.id not in unanswered_sympathy and profile.id not in mutually_liked_users and check_profile_against_preferences(
            profile, user_preferences)
    ]

    random.shuffle(filtered_profiles)
    return filtered_profiles[:count]


def check_profile_against_preferences(profile, preferences):
    if preferences.preferred_gender and preferences.preferred_gender != profile.gender:
        return False

    if preferences.preferred_age_min and profile.age < preferences.preferred_age_min:
        return False

    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    return True


@dp.message_handler(state=ProfileLookupState.show_next)
async def process_profile_lookup(message: types.Message, state: FSMContext):
    texts = load_language_texts(get_user_language(message.from_user.id, DB.session))
    async with state.proxy() as data:
        profiles = data.get("profiles")
        current_index = data.get("current_index", 0)
        total_profiles_count = 10  # –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å

        if not profiles or current_index >= len(profiles):
            # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã
            profiles = await get_random_profiles(message.from_user.id, total_profiles_count)
            data["profiles"] = profiles
            current_index = 0

        if message.text == "‚ù§Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–º–ø–∞—Ç–∏—é":
            if current_index < len(profiles):
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–º–ø–∞—Ç–∏—é
                liked_profile = profiles[current_index]
                recipient_id = liked_profile.id
                sender_id = message.from_user.id

                # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∏–º–ø–∞—Ç–∏—é
                sender = profil(sender_id)
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–ø–∞—Ç–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                add_like(sender_id, recipient_id)

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏)
                current_index += 1
                data["current_index"] = current_index

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ë –æ —Ç–æ–º, —á—Ç–æ –µ–º—É –ø—Ä–∏—à–ª–∞ —Å–∏–º–ø–∞—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ê
                if sender:
                    notification_message = (texts["Like_All"])
                    await bot.send_message(chat_id=recipient_id, text=notification_message, reply_markup=sympathies)
                    current_index += 1
                    data["current_index"] = current_index

        elif message.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É,
            # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ
            current_index += 1
            data["current_index"] = current_index
        if current_index < len(profiles):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
            profile = profiles[current_index]
            await show_profile_with_sympathy_keyboard(message, profile)
        else:
            await state.finish()
            await message.answer(texts["welcome_message"], reply_markup=main(texts))


async def show_profile_with_sympathy_keyboard(message: types.Message, profile):
    texts = load_language_texts(get_user_language(message.from_user.id, DB.session))

    name = profile.name
    age = profile.age
    gender = profile.gender
    country = profile.country
    about = profile.about
    photo = profile.photo  # –ó–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    city = profile.city

    text = (
        f"{name}, {age}, {texts['gender']}, {gender}\n {texts['country']}: {country}, {city}\n"
        f"{texts['ABout']}: {about}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–∫ –æ–±—ä–µ–∫—Ç File, –∞ –Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    if photo:
        await message.answer_photo(photo=photo, caption=text, reply_markup=sympathy)
    else:
        await message.answer(text, reply_markup=create_syma_keyboard(texts))


def profil(user_id: int):
    user = session.query(User).filter_by(id=user_id).first()
    if user:
        return Profile(
            name=user.name,
            age=user.age,
            gender=user.gender,
            country=user.country,
            about=user.about,
            photo=user.photo,
            wallet=user.wallet,
            city=user.city,
            telegram_username=user.telegram_username
        )
    else:
        return None


@dp.message_handler(lambda message: message.text == "üòç –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–º–ø–∞—Ç–∏–∏", state="*")
async def show_sympathy_message(message: types.Message, state: FSMContext):
    user = message.from_user.id
    texts = load_language_texts(get_user_language(message.from_user.id, DB.session))

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∏–º–ø–∞—Ç–∏—é,
    # –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞
    pending_sympathy_users = get_pending_sympathy(user)

    if not pending_sympathy_users:
        await message.answer(texts["MYSIMP"])
        return

    async with state.proxy() as data:
        current_index = data.get("current_index", 0)

        if current_index >= len(pending_sympathy_users):
            # –ï—Å–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –±—ã–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 0
            current_index = 0

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
        recipient_id = pending_sympathy_users[current_index]

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∏–º–ø–∞—Ç–∏—é
        recipient_profile = profil(recipient_id)

        if recipient_profile:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∏–º–ø–∞—Ç–∏—é
            notification_message = f"{recipient_profile.name}, {recipient_profile.age}, " \
                                   f"{texts['gender']}, {recipient_profile.gender}\n" \
                                   f"{texts['country']}, {recipient_profile.country}, {recipient_profile.city}\n" \
                                   f"{texts['ABout']}, {recipient_profile.about}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_photo(chat_id=user, photo=recipient_profile.photo,
                                 caption=notification_message, reply_markup=create_syma_keyboard(texts))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∞–Ω–∫–µ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_index += 1
            data["current_index"] = current_index
            await state.update_data(data)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            return

        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∞–Ω–∫–µ—Ç—É
            current_index += 1
            data["current_index"] = current_index
            await state.set_data(data)
            return


@dp.message_handler(lambda message: message.text == "üöÄ –°–ª–µ–¥—É—é—â–∞—è", state=ProfileLookupState.show_next)
async def skip_sympathy_message(message: types.Message, state: FSMContext):
    await show_sympathy_message(message, state)


@dp.message_handler(lambda message: message.text == "‚ô•Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é", state="*")
async def process_mutual_sympathy(message: types.Message, state: FSMContext):
    user = message.from_user.id
    texts = load_language_texts(get_user_language(message.from_user.id, DB.session))

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∏–º–ø–∞—Ç–∏—é,
    # –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞
    pending_sympathy_users = get_pending_sympathy(user)

    if not pending_sympathy_users:
        await message.answer(texts["MYSIMP"], reply_markup=ssympathy(texts))
        await ProfileLookupState.show_next.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    current_index = data.get("current_index", 0) - 1

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ —Å–∏–º–ø–∞—Ç–∏–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 0
    if current_index >= len(pending_sympathy_users):
        current_index = 0

    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
    recipient_id = pending_sympathy_users[current_index]

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–∏–º–ø–∞—Ç–∏–∏ (—Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    sender_profile = profil(user)
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–∏–º–ø–∞—Ç–∏–∏
    recipient_profile = profil(recipient_id)

    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    if sender_profile and recipient_profile:
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏
        move_pending_to_mutual(user)
        move_pending_to_mutual(recipient_id)

        sender_name_link = f"<a href='https://t.me/{sender_profile.telegram_username}'>{sender_profile.name}</a>"
        recipient_name_link = f"<a href='https://t.me/{recipient_profile.telegram_username}'>{recipient_profile.name}</a>"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏
        notification_message_sender = f"{texts['LAVE']},{recipient_name_link}"
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏
        notification_message_recipient = f"{texts['LIKEME']},{sender_profile.name}, {sender_profile.age}, " \
                                         f"{texts['gender']} {sender_profile.gender}\n" \
                                         f"{texts['country']}: {sender_profile.country}, {sender_profile.city}\n" \
                                         f"{texts['ABout']} {sender_profile.about}\n" \
                                         f"{texts['MESME']} {sender_name_link}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        await bot.send_message(chat_id=user, text=notification_message_sender, parse_mode='HTML', reply_markup=main)

        await bot.send_photo(chat_id=recipient_id, photo=sender_profile.photo,
                             caption=notification_message_recipient,
                             reply_markup=main, parse_mode='HTML')
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∞–Ω–∫–µ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_index += 1
        data["current_index"] = current_index
        await state.update_data(data)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∞–Ω–∫–µ—Ç—É
        current_index += 1
        data["current_index"] = current_index
        await state.set_data(data)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return


@dp.message_handler(lambda message: message.text == "üíû –í–∞—à–∏ –≤–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏", state="*")
async def sympathy_profiles(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    texts = load_language_texts(get_user_language(message.from_user.id, DB.session))

    mutual_sympathy_list = get_mutually_liked_users(user_id)

    if mutual_sympathy_list:
        data = await state.get_data()
        current_profile_index = data.get("current_profile_index", 0)

        if current_profile_index < len(mutual_sympathy_list):
            profile_user_id = mutual_sympathy_list[current_profile_index]
            profile = profil(profile_user_id)

            if profile:
                recipient_name_link = f"<a href='https://t.me/{profile.telegram_username}'>{profile.name}</a>"
                reply_message = (
                    f"{profile.name}, {profile.age}, {texts['gender']}, {profile.gender}\n",
                    f"{texts['country']}: {profile.country}, {profile.city}\n, "
                    f"{texts['ABout']}:{profile.about}\n"
                    f"{texts['Message']}:{recipient_name_link}"
                )

                if profile.photo:
                    await message.answer_photo(
                        photo=profile.photo, caption=reply_message, parse_mode='HTML',
                        reply_markup=create_nextsdelete_keyboard(texts))
                else:
                    await message.answer(reply_message, parse_mode='HTML')

                new_index = current_profile_index + 1
                if new_index >= len(mutual_sympathy_list):
                    new_index = 0  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–Ω–∫–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å –∫ 0

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∞–Ω–∫–µ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
                data["current_profile_index"] = new_index
                await state.update_data(data)
            else:
                await message.answer(texts['NO_ANKET'])
        else:
            await message.answer(texts['NO_SIMP'], reply_markup=ssympathy(texts))
    else:
        await message.answer(texts['NO_DATA'], reply_markup=ssympathy(texts))


@dp.message_handler(lambda message: message.text == "‚è≠ –°–ª–µ–¥—É—é—â–∞—è", state="*")
async def callback_show_next_profile(message: types.Message, state: FSMContext):
    await sympathy_profiles(message, state)


@dp.message_handler(lambda message: message.text == "üíù –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–º–ø–∞—Ç–∏—é", state="*")
async def show_sent_sympathy_profiles(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    texts = load_language_texts(get_user_language(message.from_user.id, DB.session))

    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–º–ø–∞—Ç–∏—é —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    users_sent_sympathy = get_unanswered_sympathy(user_id)

    if users_sent_sympathy:
        profiles = [profil(user_id) for user_id in users_sent_sympathy]

        data = await state.get_data()
        current_profile_index = data.get("current_profile_index", 0) - 1

        if current_profile_index < len(profiles):
            profile = profiles[current_profile_index]

            if profile:
                reply_message = (f"{profile.name}, {profile.age}, {texts['gender']}, {profile.gender}\n",
                                 f"{texts['country']}, {profile.country}, {profile.city}\n, "
                                 f"{texts['ABout']}, {profile.about}\n")
                if profile.photo:
                    await message.answer_photo(photo=profile.photo, caption=reply_message,
                                               parse_mode='HTML', reply_markup=create_nextsdelete_keyboard(texts))
                else:
                    await message.answer(reply_message, parse_mode='HTML')

                new_index = current_profile_index + 1
                if new_index >= len(profiles):
                    new_index = 0  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–Ω–∫–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å –∫ 0
                await state.update_data(current_profile_index=new_index)
        else:
            await message.answer(texts["SERCH"], reply_markup=ssympathy(texts))

    else:
        await message.answer(texts["NO_SERCH"], reply_markup=ssympathy(texts))


@dp.message_handler(lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å", state="*")
async def delete_sympathy(message: types.Message, state: FSMContext):
    texts = load_language_texts(get_user_language(message.from_user.id, DB.session))
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∑–∞–∏–º–Ω—ã–º–∏ —Å–∏–º–ø–∞—Ç–∏—è–º–∏
    mutual_sympathy_list = get_mutually_liked_users(user_id)

    data = await state.get_data()
    current_profile_index = data.get("current_profile_index", 0) - 1

    if current_profile_index < len(mutual_sympathy_list):
        other_user_id = mutual_sympathy_list[current_profile_index]
        delete_mutual_sympathy(user_id, other_user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(current_profile_index=current_profile_index)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        await sympathy_profiles(message, state)

    else:
        await message.answer(texts["Sympa_Del"])


@dp.message_handler(lambda message: message.text == "‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è", state="*")
async def nextsprofile(message: types.Message, state: FSMContext):
    await show_sent_sympathy_profiles(message, state)


@dp.message_handler(lambda message: message.text == "‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å", state="*")
async def delete_unanswered_sympathy(message: types.Message, state: FSMContext):
    texts = load_language_texts(get_user_language(message.from_user.id, DB.session))
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–º–ø–∞—Ç–∏—é —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    unanswered_sympathy_list = get_unanswered_sympathy(user_id)

    data = await state.get_data()
    current_profile_index = data.get("current_profile_index", 0) - 1

    if current_profile_index < len(unanswered_sympathy_list):
        other_user_id = unanswered_sympathy_list[current_profile_index]
        delete_sympathy_entry(user_id, other_user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(current_profile_index=current_profile_index)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        await show_sent_sympathy_profiles(message, state)

    else:
        await message.answer(texts["No_sympa"])

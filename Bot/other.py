import json
import string

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ContentType

import db
from creat_Bot import dp, bot
from db import create_profile
from user_kb import But_User_Help, But_User_start, gender_markup, keyboard, keyboard_bonus


class RegistrationState(StatesGroup):
    name = State()
    age = State()
    gender = State()
    photo = State()


async def exo(message: types.Message):
    if {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in message.text.split(' ')} \
            .intersection(set(json.load(open('Black.json')))) != set():
        await message.reply("–ú–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω")
        await message.delete()
    elif message.text == "üëã –°–æ–∑–¥–∞—Ç—å –ê–Ω–∫–µ—Ç—É" or message.text == "üëã":
        user_id = message.from_user.id
        if db.is_user_registered(user_id):
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞, —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë?", reply_markup=ReplyKeyboardRemove())
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –∫–∞–±–∏–Ω–µ—Ç!", reply_markup=keyboard)
        else:
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                                 reply_markup=ReplyKeyboardRemove())
            await RegistrationState.name.set()
    elif message.text == "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ" or message.text == "‚ùì":
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å", reply_markup=But_User_Help)
    elif message.text == "üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞":
        await message.answer("–ó–Ω–∞—á–∏—Ç –ø—Ä–∞–≤–∏–ª –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –Ω–µ –º–Ω–æ–≥–æ):\n1.–ù–µ –≤–∑–¥—É–º–∞–π —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—é–¥–∞ –ø–æ—à–ª—è—Ç–∏–Ω—É, "
                             "—è –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª)\n2.–ë—É–¥—å –≤–µ–∂–ª–∏–≤ , –∏–º–µ–π —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É)\n3.–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª "
                             "—Å—Ç—Ä–æ–≥–æ –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è , –∞ –µ—Å–ª–∏ —Ç–æ—á–Ω–µ–µ —Ç–æ –≤–∞—Å –ó–∞–±–∞–Ω—è—Ç ")
    elif message.text == "ü§î –ß—Ç–æ —è –º–æ–≥—É?":
        await message.answer("–£ –º–µ–Ω—è –µ—â–µ –Ω–µ –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–πüòî,–Ω–æ —è –º–æ–≥—É –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–∞—Ä—É), –∞ –≤–æ–∑–º–æ–∂–Ω–æ –∏ "
                             "–¥–≤–µ –ø–∞—Ä—ã, –∏–ª–∏ –¥–∞–∂–µ —Ç—Ä–∏) –∏–ª–∏ –∑–∞–±–∞–Ω–∏—Ç—å —Ç–µ–±—è –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ! –ù–æ —è –Ω–∞–¥–µ—é—Å—å —ç—Ç–æ–≥–æ "
                             "–Ω–µ –±—É–¥–µ—Ç:) ")
    elif message.text == "üí∞ –ö–æ—à–µ–ª—ë–∫" or message.text == "üí∞":
        await message.answer("–ó–∞ –¥—É—à–æ–π –Ω–∏ –≥—Ä–æ—à–∞")
    elif message.text == "‚ù§Ô∏è –í–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏" or message.text == "‚ù§Ô∏è":
        await message.answer("–£ —Ç–µ–±—è –µ—Å—Ç—å –º–æ—è —Å–∏–º–ø–∞—Ç–∏—è üòâ")
    elif message.text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã" or message.text == "üëÄ":
        await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif message.text == "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" or message.text == "üåê":
        await message.answer("–Æ –°–ø—ã–∫ –∏–Ω–≥–ª–∏—à?)")
    elif message.text == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or message.text == "üè†":
        user_id = message.from_user.id
        if db.is_user_registered(user_id):
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –∫–∞–±–∏–Ω–µ—Ç!", reply_markup=keyboard)
    elif message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or message.text == "üîô":
        user_id = message.from_user.id
        if db.is_user_registered(user_id):
            await message.answer("–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—à—å, –æ–±—Ä–∞—â–∞–π—Å—è)", reply_markup=ReplyKeyboardRemove())
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –∫–∞–±–∏–Ω–µ—Ç!", reply_markup=keyboard)
        else:
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=But_User_start)
    elif message.text == "üòä –ú–æ—è –∞–Ω–∫–µ—Ç–∞" or message.text == "üòä":
        user_id = message.from_user.id
        profile = db.get_profile(user_id)
        if profile:
            name, age, gender = profile
            photo_data = db.get_user_photo(user_id)
            if photo_data:
                await bot.send_photo(chat_id=message.chat.id, photo=photo_data)
            text = f"–ò–º—è: {name}\n –í–æ–∑—Ä–∞—Å—Ç: {age}\n –ü–æ–ª: {gender}"
            await bot.send_message(chat_id=message.chat.id, text=text)
        else:
            text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            await bot.send_message(chat_id=message.chat.id, text=text)
    elif message.text == "üéÅ –ë–æ–Ω—É—Å—ã" or message.text == "üéÅ":
        await message.answer("‚≠êÔ∏è –ó–≤–µ–∑–¥–∞\nüí¨ –ù–∞–ø–∏—à–∏ '–ü—Ä–∏–≤–µ—Ç'\nüëë –ü–µ—Ä—Å–æ–Ω–∞ –í–ò–ü\nüë§ –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ\nüí™üèº –ù–ï–¢ –õ–ò–ú–ò–¢–£! ‚Ä¶ –ü–æ—á—Ç–∏",
                             reply_markup=keyboard_bonus)
        if message.text == "‚≠êÔ∏è –ó–≤–µ–∑–¥–∞" or message.text == "‚≠êÔ∏è":
            await message.answer("–ù–∞–¥–µ–ª—è–µ—Ç —Ç–µ–±—è –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —É–¥–∞—á–µ–π, –∞–Ω–∫–µ—Ç–∞ –≤—ã–ø–∞–¥–∞–µ—Ç —á–∞—â–µ –∏ –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∏–¥—É —Å—Ç–æ–∏–º–æ—Å—Ç—å 600"
                                 " –±–∞–ª–ª–æ–≤ —Å—Ä–æ–∫ 7 –¥–Ω–µ–π, 1100 –±–∞–ª–ª–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü ")
        elif message.text == "üí¨ –ù–∞–ø–∏—à–∏ '–ü—Ä–∏–≤–µ—Ç'" or message.text == "üí¨":
            await message.answer("–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–ª—è —Ç–µ–±—è –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∏—Ç—å, –Ω–æ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–º—É—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
                                 "—Å–æ–æ–±—â–µ–Ω–∏–µ (–°—Ç–æ–∏–º–æ—Å—Ç—å 800 –±–∞–ª–ª–æ–≤ —Å—Ä–æ–∫ 7 –¥–Ω–µ–π, 1500 –±–∞–ª–ª–æ–≤ –∑–∞ –º–µ—Å—è—Ü)")
        elif message.text == "üëë –ü–µ—Ä—Å–æ–Ω–∞ –í–ò–ü" or message.text == "üëë":
            await message.answer("–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ –¥–≤–µ—Ä–∏, –≤—Å—ë –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä –∞–Ω–∫–µ—Ç, –¥–ª—è –≤–∞—Å –Ω–µ—Ç "
                                 "–≥—Ä–∞–Ω–∏—Ü. –í—ã –ø–µ—Ä—Å–æ–Ω–∞ –í–ò–ü)")
        elif message.text == "üë§‚Äç –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ" or message.text == "üë§":
            await message.answer("–í—ã —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã, –∑–∞–≥–∞–¥–æ—á–Ω—ã –∏ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å –ª–∏—à—å —Ç–µ–º, –∫–æ–≥–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ"
                                 " –¥–æ—Å—Ç–æ–π–Ω—ã–º")
        elif message.text == "üí™üèº –ù–ï–¢ –õ–ò–ú–ò–¢–£! ‚Ä¶ –ü–æ—á—Ç–∏" or message.text == "üí™üèº":
            await message.answer("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏–º–∏—Ç –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–º? –î–ª—è —Ç–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "
                                 "—É–≤–µ–ª–∏—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–∫–µ—Ç.")
    else:
        await message.answer("—á—Ç–æ?")


@dp.message_handler(state=RegistrationState.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name.isalpha():
        await message.answer("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    async with state.proxy() as data:
        data['name'] = name

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
    await RegistrationState.age.set()


@dp.message_handler(state=RegistrationState.age)
async def process_age(message: types.Message, state: FSMContext):
    age = message.text
    if not age.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏")
        return

    async with state.proxy() as data:
        data['age'] = age

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª", reply_markup=gender_markup)
    await RegistrationState.gender.set()


@dp.message_handler(lambda message: message.text in ["‚ôÇÔ∏è –ú—É–∂—á–∏–Ω–∞", "‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω–∞", "ü§ñ –î—Ä—É–≥–æ–µ", "‚ôÇÔ∏è", "‚ôÄÔ∏è", "ü§ñ"],
                    state=RegistrationState.gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text

    if gender not in ["‚ôÇÔ∏è –ú—É–∂—á–∏–Ω–∞", "‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω–∞", "ü§ñ –î—Ä—É–≥–æ–µ", "‚ôÇÔ∏è", "‚ôÄÔ∏è", "ü§ñ"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return

    async with state.proxy() as data:
        data['gender'] = gender

    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    await RegistrationState.photo.set()

    async with state.proxy() as data:
        data['photo'] = None


@dp.message_handler(content_types=ContentType.PHOTO, state=RegistrationState.photo)
async def process_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    async with state.proxy() as data:
        data['photo'] = photo
    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    await state.finish()

    user_id = message.from_user.id
    name = data["name"]
    age = data["age"]
    gender = data["gender"]
    photo = data['photo']

    create_profile(user_id, name, age, gender, photo)
    await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {name}!\n"
                         f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
                         f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                         f"–ò–º—è: {name}\n"
                         f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                         f"–ü–æ–ª: {gender}",
                         reply_markup=ReplyKeyboardRemove())
    await state.finish()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!", reply_markup=keyboard)


def reg_other(dp: Dispatcher):
    dp.register_message_handler(exo)
    dp.register_message_handler(process_name, state=RegistrationState.name)
    dp.register_message_handler(process_age, state=RegistrationState.age)
    dp.register_callback_query_handler(process_gender, state=RegistrationState.gender)
